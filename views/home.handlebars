
{{> nav}}

<div id="tooltip"></div>

<div class="row">
  <div class="small-12 medium-offset-1 medium-10 large-offset-2 large-8 columns box">
    <div id="overview_map"></div>
  </div>
</div>

<br>


<!-- TODO: put text for facts in YML and only add in numbers in the js -->
<!-- <div class="row">
  <div class="small-3 column">
    <div id="overview__fact1" class="overview_fact"></div>
  </div>
  <div class="small-3 column">
    <div id="overview__fact2" class="overview_fact"></div>
  </div>
  <div class="small-3 column">
    <div id="overview__fact3" class="overview_fact"></div>
  </div>
</div> -->


<div class="row">
  <div class="small-12 medium-offset-1 medium-10 large-offset-2 large-8 columns about-block box">
    <h4>{{text.about.header1}}</h4>
    <p>{{text.about.text1a}}</p>
    <p>{{text.about.text1b}}</p>
  </div>
</div>

<br>

<div class="row">
  <div class="small-12 medium-offset-1 medium-10 large-offset-2 large-8 columns about-block box">
    <h4>{{text.about.header2}}</h4>
    <p>{{text.about.text2a}}</p>
    <p>{{text.about.text2b}}</p>
    <p>{{text.about.text2c}}</p>
    <p>{{text.about.text2d}}</p>
    <p>{{text.about.text2e}}: <a href="{{text.about.ifrcUrl}}" target="_blank">{{text.about.ifrcUrl}}</a></p>
  </div>
</div>

<br>

<div class="row">
  <div class="small-12 medium-offset-1 medium-10 large-offset-2 large-8 columns about-block box">
    <h4>{{text.resources.resources}}</h4>
    <ul>
      <li><a href="{{text.resources.guidelines-url}}" target="_blank">{{text.resources.guidelines}}</a></li>
      <li><a href="{{text.resources.whatIs-url}}" target="_blank">{{text.resources.whatIs}}</a></li>
      <li><a href="{{text.resources.howTo-url}}" target="_blank">{{text.resources.howTo}}</a></li>
      <li><a href="{{text.resources.trainingGuide-url}}" target="_blank">{{text.resources.trainingGuide}}</a></li>
      <li><a href="{{text.resources.toolbox-url}}" target="_blank">{{text.resources.toolbox}}</a></li>
    </ul>
  </div>
</div>

<br>
<br>




<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="/js/d3-geo-projection.v1.min.js"></script>
<script src="/js/topojson.v2.min.js"></script>
<script src="/js/colorbrewer.min.js"></script>
<script>

d3.selection.prototype.moveToFront = function() {
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};

// TODO: cleanup variables (need for global vs local)
var svg, projection, path, countries;
var width, height;

function setDimensions(){
  width = document.getElementById('overview_map').offsetWidth;
  if(width / 2 <= window.innerHeight - 60) {
    height = width / 2;
  } else {
    height = window.innerHeight - 60;
    width = height * 2;
  }
}

function setup(){
  projection = d3.geoEckert3()
    .translate([0, 0])
    .scale(width / 2 / Math.PI);
  path = d3.geoPath()
      .projection(projection);
  svg = d3.select("#overview_map").append("svg")
      .attr("width", width)
      .attr("height", height)
      .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
  countries = svg.append("g").classed("map-countries", true);
}

// TODO: change styling so that the light red/pink countries aren't lost
var quantize = d3.scaleQuantize()
    .domain([0, 10])
    .range(colorbrewer.Reds[9]);
    // Every ColorBrewer Scale
    // http://bl.ocks.org/mbostock/raw/5577023/

function grabData(error, geo, docs) {
  documents = docs;
  countryCounts = d3.nest()
    .key(function(d) { return d.iso3; })
    .rollup(function(v) { return d3.sum(v, function(d) { return 1; }); })
    .map(docs);
  world = topojson.feature(geo, geo.objects.ne_50m).features;
  giveStats();
  drawLayers();
}

// TODO: determine actual facts to be given, and move any text into the template + YML data
function giveStats() {
  var fact1 = "<h5>" + documents.length + " VCA reports have been uploaded.</h5>";
  var fact2 = "<h5>" + "The reports are from " + countryCounts.size() + " countries.</h5>";
  var fact3 = "<h5>" + d3.sum(documents, function(d) { return d.published }) + " reports are available for download.</h5>";
  $("#overview__fact1").html(fact1);
  $("#overview__fact2").html(fact2);
  $("#overview__fact3").html(fact3);
}

function drawLayers() {
  country = countries.selectAll("d").data(world);
  country.enter().insert("path")
      .attr("class", "country country__default")
      .attr("d", path)
      // .style("fill", defaultFill)
      .on("mouseover", function(d){
        populateMapTooltip(d, this);
        d3.select(this).moveToFront();
        d3.select(this).classed("country__focus", true);
      })
      .on("mouseout", function(d){
        d3.select(this).classed("country__focus", false);
        $('#tooltip').empty();
      });
  updateMapColors()
}

function updateMapColors() {

  quantize.domain(d3.extent(d3.values(countryCounts)));
  if(quantize.domain()[0] === 0 && quantize.domain()[1] === 0) {quantize.domain([0,1])}
  countries.selectAll('.country').each(function(d,i){
    var thisCount = countryCounts.get(d.properties.iso);
    if(!thisCount) {
      // d3.select(this).style("fill", function(d){
      //   return defaultFill;
      // });
    } else {
      console.log(this)
      d3.select(this)
      .attr('data-count', thisCount)
      .classed('country__active', true);
      // .style("fill", function(d){
        // return quantize(thisCount);
      // });
    }
  });
}

function populateMapTooltip(d, el){
  var tooltipText = "<span>" + d.properties.name;
  var count = d3.select(el).attr('data-count');
  tooltipText += count ? '<span> - ' + count + ' VCA' : '<span>';
  tooltipText += (count>1) ? 's</span>' : '</span>';
  tooltipText += "</span>";
  $('#tooltip').append(tooltipText);
}

window.onload = function() {
  setDimensions();
  setup();
  d3.queue()
  	.defer(d3.json, '/data/ne_50m-simple-topo.json')
  	.defer(d3.json, '/api/documents')
  	.await(grabData);
  $('body').mouseover(function(e) {
      //Set the X and Y axis of the tooltip
      $('#tooltip').css('top', e.pageY + 10 );
      $('#tooltip').css('left', e.pageX + 20 );
    }).mousemove(function(e) {
      //Keep changing the X and Y axis for the tooltip, thus, the tooltip move along with the mouse
      $("#tooltip").css({top:(e.pageY+15)+"px",left:(e.pageX+20)+"px"});
  });
}

function redraw() {
  setDimensions();
  d3.select("#overview_map").select('svg').remove();
  setup();
  drawLayers();
}

d3.select(window).on("resize", throttle);
var throttleTimer;
function throttle() {
    window.clearTimeout(throttleTimer);
    throttleTimer = window.setTimeout(function() {
    redraw();
  }, 200);
}

</script>
