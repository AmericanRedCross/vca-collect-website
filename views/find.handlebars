{{> nav}}


<div class="row">
  <div id="map-header" class="small-12 medium-offset-1 medium-10 large-offset-2 large-8 columns box">
    <h4 id="selected-country" style="display:none;">
      <span id="country-name"> <!-- country name --> </span> &nbsp; <small id="clear-country" onClick="updateCountry(null);" class="subheader action-text"> <i class="fa fa-times-circle-o" aria-hidden="true"></i>  clear </small>
    </h4>
    <h4 id="no-selected-country" style="display:none;">
      <span> {{text.find.global}} </span> &nbsp; <small class="subheader"> {{text.find.select}} </small>
    </h4>

    <p><small><span id="mapped-docs">?</span> {{text.find.mapped}} <span id="total-docs">?</span> {{text.find.total}} {{text.find.scroll}}</small></p>
  </div>
</div>
<div class="row">
  <div class="small-12 medium-offset-1 medium-10 large-offset-2 large-8 columns box" style="padding:0;">
    <div id="find-loader">
      <h1><i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i></h1>
      <span class="sr-only">Loading...</span>
    </div>
    <div id="overview_map"></div>
  </div>
</div>

<div id="country-cards" class="row small-up-2 medium-up-3 large-up-4" data-equalizer>
</div>


<!-- <div id="documents-header" class="row expanded" style="display:none;">
  <div class="small-12 columns box" >
    <div style="margin:10px;">
      <h4><span id="selected-country">Country Name</span> &nbsp; <small onClick="countryChoice(null);" class="subheader action-text"> <i class="fa fa-undo" aria-hidden="true"></i>  {{text.common.back}} </small></h4>
    </div>
  </div>
</div>
<br> -->
<br>
<div id="documents-cards" class="row small-up-2 medium-up-3 large-up-4" data-equalizer>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.6.0/d3.min.js"></script>
<script src="/js/topojson.v2.min.js"></script>
<script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.0.6/dist/MarkerCluster.css" />
<script src="https://unpkg.com/leaflet.markercluster@1.0.6/dist/leaflet.markercluster.js"></script>
<script>

var pageLanguage = "{{text.meta.language}}";
var urlIso = window.location.search.substring(1);

var map = L.map('overview_map', {
  scrollWheelZoom: false,
  center: [0,0],
  zoom: 2
});
L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.{ext}', {
	maxZoom: 19,
  attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> | Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
  subdomains: 'abcd',
  minZoom: 0,
  ext: 'png'
}).addTo(map);

var markers = L.markerClusterGroup({
  showCoverageOnHover: false,
  maxClusterRadius: 40
});
map.addLayer(markers);

L.svg().addTo(map);
// pick up the SVG from the map object
var svg = d3.select('#overview_map').select('svg');
var geoGroup = svg.append('g').attr('id', 'geo');
var mapped;

function projectPoint(x, y){
  var point = map.latLngToLayerPoint(new L.LatLng(y, x));
  this.stream.point(point.x, point.y);
}

var transform = d3.geoTransform({point: projectPoint});
var path = d3.geoPath().projection(transform);

d3.selection.prototype.moveToFront = function() {
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};
d3.selection.prototype.moveToBack = function() {
    return this.each(function() {
        var firstChild = this.parentNode.firstChild;
        if (firstChild) {
            this.parentNode.insertBefore(this, firstChild);
        }
    });
};

var typeIcon = function(extension){
  switch(extension) {
    case ".doc":
    case ".docx":
      return '<i class="fa fa-fw fa-file-word-o"></i> '
      break;
    case ".jpeg":
    case ".jpg":
    case ".png":
      return '<i class="fa fa-fw fa-file-image-o"></i> '
      break;
    case ".pdf":
      return '<i class="fa fa-fw fa-file-pdf-o"></i> '
      break;
    case ".ppt":
    case ".pptx":
      return '<i class="fa fa-fw fa-file-powerpoint-o"></i> '
      break;
    case ".xls":
    case ".xlsm":
    case ".xlsx":
      return '<i class="fa fa-fw fa-file-excel-o"></i> '
      break;
    case ".zip":
      return '<i class="fa fa-fw fa-file-archive-o"></i> '
      break;
    default:
      return '<i class="fa fa-fw fa-file-o"></i> '
  }
};

var formatBytes = function(bytes, decimals) {
   if(bytes == 0) return '0 Bytes';
   var k = 1000,
       dm = decimals + 1 || 3,
       sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
       i = Math.floor(Math.log(bytes) / Math.log(k));
   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

window.onload = function(){

  d3.queue()
    .defer(d3.json, '/data/ne_50m-simple-topo.json')
    .defer(d3.json, '/api/all')
    .await(buildPage);
}

var updateCountry = function(iso) {
  if(iso){
    var name = '<img class="country-flag" src="/images/flags/4x3/' + countries.get(iso)[0].iso2.toLowerCase() + '.svg" >';
    name += (countries.get(iso)[0][pageLanguage] !== undefined) ? countries.get(iso)[0][pageLanguage] : countries.get(iso)[0]["en"];
    $('#country-name').html(name);
    $('#selected-country').show();
    $('#no-selected-country').hide();
    mapped.classed("find-country__active", false);
    mapped.each(function(d){
      if(d.properties.iso === iso) {
        d3.select(this).moveToFront();
        d3.select(this).classed("find-country__active", true);
        var bounds = d3.geoBounds(d)
        map.fitBounds([[ bounds[0][1], bounds[0][0] ],[ bounds[1][1], bounds[1][0] ]]);
      }
    })
    updateDocs(iso);
  } else {
    var findUrl = $("#link-find").attr("href");
    window.history.pushState(null, '', findUrl);
    mapped.classed("find-country__active", false);
    $('#country-name').html('');
    $('#selected-country').hide();
    $('#no-selected-country').show();
    map.fitBounds(L.geoJson(world).getBounds());
    updateDocs();
  }
}

var centroidOptions = {
    radius: 8,
    fillColor: "#ED1B2E",
    color: "#FFF",
    weight: 2.5,
    opacity: 1,
    fillOpacity: 1
};

var updateDocs = function(iso){
  markers.clearLayers()
  var mapped = 0;
  for (var i = 0; i < docs.length; i++) {
    // does this test work? whats a better test for a valid latlng?
    if( parseFloat(docs[i].lat) < 90 && parseFloat(docs[i].lat) > -90 && parseFloat(docs[i].lng) < 180 && parseFloat(docs[i].lng) > -180 ) {
      var marker = L.circleMarker(new L.LatLng(parseFloat(docs[i].lat), parseFloat(docs[i].lng)), centroidOptions);

      if(iso){
          if(docs[i].iso3 === iso) { mapped++; markers.addLayer(marker); }
      } else {
        mapped++;
        markers.addLayer(marker);
      }
    }
  }
  $("#mapped-docs").text(mapped);

  var filteredDocs = docs.filter(function(d) {
    if(iso) { return d.iso3 == iso } else { return true }
  });
  $("#total-docs").text(filteredDocs.length);

  var documentCards = d3.select('#documents-cards').selectAll('div.column').data(filteredDocs, function(d) { return d.rowid; });

  // EXIT
  documentCards.exit().remove();
  // no UPDATE
  // ENTER
  documentCards.enter().append('div')
    .attr('class', 'column')
    .style('opacity', 1e-6)
    .html(function(d) {
        var download = "";
        if(d.published == 1) {
          var extension = d.filename.substr(d.filename.lastIndexOf('.'));
          download = '<a href="/api/file/' + d.rowid + '" download>' + typeIcon(extension) + ' ' + formatBytes(d.bytes, 1) + '</a><br>';
        }
        var html = '<div class="card" data-equalizer-watch>' +
        '<div class="card-section">' +
        '<h6><i class="fa fa-fw fa-map-marker" aria-hidden="true"></i> ' + d.community + '<br><span class=""><i class="fa fa-fw fa-file-text-o" aria-hidden="true"></i> ' + d.title + '</span></h6>' +
        '<p><small><b>' + d.type + ', ' + d.year + '</b> - ' +
        '' + d.descriptionlocal + '</p>';
        if(d.descriptionen.length > 0) {
          html+= '<p><i>' + d.descriptionen + '</i></p>';
        }
        html += '</small></p><p>' + download + '</p>' +
        '</div>' +
        '</div>';
        return html;
      })
    .transition().duration(250)
      .style('opacity', 1);

  d3.select('#documents-cards').selectAll('div.column').sort(function(a, b) {
    return d3.ascending(a.community, b.community);
  })

}


var buildPage = function(error, geo, data) {
  // save our fetched data
  docs = data.docs;
  docsIsos = d3.nest()
    .key(function(d) { return d.iso3; })
    .map(data.docs)
  countries = d3.nest()
    .key(function(d) { return d.iso3; })
    .map(data.countries)
  world = topojson.feature(geo, geo.objects.ne_50m).features.filter(function(d) { return !docsIsos.get(d.properties.iso) == false; });

  // draw the countries with documents
  mapped = geoGroup.selectAll("path")
    .data(world, function(d){ return d.properties.iso; })
    .enter().append("path")
    .attr("class", "find-country")
    .attr("d", path)
    .on("mouseover", function(d){
      d3.select(this).moveToFront();
      d3.select(this).classed("find-country__focus", true);
    })
    .on("mouseout", function(d){
      d3.select(this).classed("find-country__focus", false);
      d3.select(".find-country__active").moveToFront();
      $('#tooltip').empty();
    })
    .on('click', function(d){
      var findUrl = $("#link-find").attr("href");
      findUrl += "?" + d.properties.iso;
      window.history.pushState(null, '', findUrl);
      updateCountry(d.properties.iso);
    })

  updatePath = function(){ mapped.attr("d", path); }
  map.on('zoom move viewreset', updatePath);
  updatePath();


  $("#find-loader").hide();
  updateCountry(urlIso);


}



</script>
